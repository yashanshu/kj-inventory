name: Deploy to Production

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:  # Allow manual deployment trigger

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: backend/go.mod
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Run backend tests
        working-directory: backend
        run: go test ./...

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.1

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        working-directory: frontend
        env:
          CI: true
        run: pnpm test -- --run

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e

            echo "Starting deployment..."

            # Navigate to deployment directory
            cd /opt/kj-inventory || { echo "Deployment directory not found!"; exit 1; }

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            echo "Pulling latest Docker image..."
            docker pull ghcr.io/${{ github.repository }}:latest

            # Backup database
            echo "Backing up database..."
            if [ -f ./data/inventory.db ]; then
              cp ./data/inventory.db ./data/inventory.db.backup.$(date +%Y%m%d_%H%M%S)
              # Keep only last 5 backups
              ls -t ./data/inventory.db.backup.* | tail -n +6 | xargs -r rm
            fi

            # Run deployment script
            echo "Running deployment script..."
            chmod +x ./scripts/deploy.sh
            ./scripts/deploy.sh

            # Verify deployment
            echo "Verifying deployment..."
            sleep 5
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "Deployment successful! Application is healthy."
            else
              echo "Health check failed!"
              exit 1
            fi

            # Cleanup old images
            echo "Cleaning up old Docker images..."
            docker image prune -f

            echo "Deployment completed successfully!"

      - name: Deployment status notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment to production succeeded!"
            echo "Deployed commit: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
          else
            echo "Deployment to production failed!"
            echo "Failed commit: ${{ github.sha }}"
          fi

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
          fi

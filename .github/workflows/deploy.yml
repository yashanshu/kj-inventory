name: Deploy to Production

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:  # Allow manual deployment trigger

concurrency:
  group: production-deployment
  cancel-in-progress: false  # Don't cancel running deployments

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: backend/go.mod
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Run backend tests
        working-directory: backend
        run: go test ./...

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.1

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        working-directory: frontend
        env:
          CI: true
        run: pnpm test -- --run

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      - name: Save Docker config for registry access
        run: |
          mkdir -p .docker-config-temp
          cp ~/.docker/config.json .docker-config-temp/config.json

      - name: Ensure deployment directories exist
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            mkdir -p /opt/kj-inventory/scripts
            mkdir -p /opt/kj-inventory/data/backups
            mkdir -p /opt/kj-inventory/logs
            mkdir -p ~/.docker
      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: docker-compose.prod.yml,scripts/deploy.sh
          target: /opt/kj-inventory

      - name: Upload Docker config for registry access
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: .docker-config-temp/config.json
          target: ~/.docker/
          strip_components: 1
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e

            echo "Starting deployment..."

            # Navigate to deployment directory
            cd /opt/kj-inventory || { echo "Deployment directory not found!"; exit 1; }

            # Run deployment script
            echo "Running deployment script..."
            chmod +x ./scripts/deploy.sh
            ./scripts/deploy.sh

            echo "Deployment completed successfully!"

      - name: Deployment status notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment to production succeeded!"
            echo "Deployed commit: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
          else
            echo "Deployment to production failed!"
            echo "Failed commit: ${{ github.sha }}"
            echo ""
            echo "DEPLOYMENT FAILED - Please check the logs above for details"
            echo "The deployment has been rolled back to the previous version"
          fi

      - name: Notify on deployment failure
        if: failure()
        run: |
          echo "::error title=Deployment Failed::Deployment to production failed for commit ${{ github.sha }}. Check logs for details."

      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
          fi

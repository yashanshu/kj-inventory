version: '3.8'

services:
  app:
    image: ghcr.io/yashanshu/kj-inventory:latest
    container_name: kj-inventory-app
    restart: unless-stopped

    ports:
      - "8080:8080"

    environment:
      # Server Configuration
      - SERVER_PORT=8080
      - SERVER_READ_TIMEOUT=15
      - SERVER_WRITE_TIMEOUT=15

      # Database Configuration (SQLite)
      - DATABASE_DRIVER=sqlite3
      - DATABASE_URL=/app/data/inventory.db?_fk=1
      - DATABASE_MAX_OPEN_CONN=25
      - DATABASE_MAX_IDLE_CONN=10

      # JWT Configuration (MUST be set via .env file or secrets)
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_TIME=24

      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}

      # Application Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SERVE_STATIC=true

      # Optional: File uploads
      - MAX_UPLOAD_SIZE=10485760  # 10MB in bytes
      - UPLOAD_PATH=/app/data/uploads

    volumes:
      # Persistent data storage
      - ./data:/app/data
      - ./logs:/app/logs

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - kj-network

    # Resource limits (adjust based on your server)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Optional: PostgreSQL
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: kj-inventory-postgres
  #   restart: unless-stopped
  #
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-inventory}
  #     - POSTGRES_USER=${POSTGRES_USER:-inventory_user}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #
  #   ports:
  #     - "5432:5432"
  #
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inventory_user}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #
  #   networks:
  #     - kj-network
  #
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1.0'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 128M

  # Optional: Nginx reverse proxy with SSL
  # nginx:
  #   image: nginx:alpine
  #   container_name: kj-inventory-nginx
  #   restart: unless-stopped
  #
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #
  #   depends_on:
  #     - app
  #
  #   networks:
  #     - kj-network

  # Optional: Monitoring with Prometheus (future)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: kj-inventory-prometheus
  #   restart: unless-stopped
  #
  #   ports:
  #     - "9090:9090"
  #
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #
  #   networks:
  #     - kj-network

  # Optional: Grafana for visualization (future)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: kj-inventory-grafana
  #   restart: unless-stopped
  #
  #   ports:
  #     - "3000:3000"
  #
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #
  #   depends_on:
  #     - prometheus
  #
  #   networks:
  #     - kj-network

networks:
  kj-network:
    driver: bridge

# Define named volumes only when enabling optional services.
volumes: {}
# Example:
# volumes:
#   postgres_data:
#     driver: local
#   prometheus_data:
#     driver: local
#   grafana_data:
#     driver: local
